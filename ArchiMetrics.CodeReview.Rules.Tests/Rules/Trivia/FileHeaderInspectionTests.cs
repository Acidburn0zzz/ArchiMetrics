// --------------------------------------------------------------------------------------------------------------------
// <copyright file="FileHeaderInspectionTests.cs" company="Reimers.dk">
//   Copyright © Reimers.dk 2013
//   This source is subject to the Microsoft Public License (Ms-PL).
//   Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
//   All other rights reserved.
// </copyright>
// <summary>
//   Defines the FileHeaderInspectionTests type.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace ArchiMetrics.CodeReview.Rules.Tests.Rules.Trivia
{
	using System.Threading.Tasks;
	using ArchiMetrics.Analysis;
	using ArchiMetrics.CodeReview.Rules.Trivia;
	using Microsoft.CodeAnalysis.CSharp;
	using NUnit.Framework;

	public class FileHeaderInspectionTests
	{
		private NodeReviewer _inspector;

		[SetUp]
		public void Setup()
		{
			var exemptPatterns = new ExemptPatterns();
			exemptPatterns.Add(@"^\d\.\d\.\d{1,5}\.\d$");
			exemptPatterns.Add(@"Runtime");
			var spellChecker = new SpellChecker(exemptPatterns);
			_inspector = new NodeReviewer(new[] { new SingleLineCommentLanguageRule(spellChecker) });
		}

		[Test]
		public async Task WhenExceptionsAreDefinedThenHandlesCommentsInAutoGeneratedCode()
		{
			var tree = CSharpSyntaxTree.ParseText(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeConvertServiceClient.Properties {
    using System;

    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""System.Resources.Tools.StronglyTypedResourceBuilder"", ""4.0.0.0"")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(""Microsoft.Performance"", ""CA1811:AvoidUncalledPrivateCode"")]
        internal Resources() {
        }
    }
}
");
			var root = tree.GetRoot();
			var result = await _inspector.Inspect(string.Empty, string.Empty, root, null, null);

			CollectionAssert.IsEmpty(result, "This comment should not violate the comment rule.");
		}
	}
}
