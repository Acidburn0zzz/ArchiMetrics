<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
	<s:String x:Key="/Default/CodeInspection/Highlighting/AnalysisEnabled/@EntryValue">SOLUTION</s:String>
	<s:Boolean x:Key="/Default/Environment/SearchAndNavigation/MergeOccurences/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/Housekeeping/UnitTestingMru/UnitTestSessionPersistentData/=A88AE8135E944E0293EB6554EED2BCFA/@KeyIndexDefined">True</s:Boolean>
	<s:String x:Key="/Default/Housekeeping/UnitTestingMru/UnitTestSessionPersistentData/=A88AE8135E944E0293EB6554EED2BCFA/Name/@EntryValue">WhenCalculatingMetricsForNonCodeTextThenThrows</s:String>
	<s:String x:Key="/Default/Housekeeping/UnitTestingMru/UnitTestSessionPersistentData/=A88AE8135E944E0293EB6554EED2BCFA/XmlSerializedElements/@EntryValue">&lt;Session&gt;&lt;Elements&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule" type="NUnitTestFixtureElement" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule" type="NUnitTestFixtureElement" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.ProjectDataComparerTests+GivenAProjectDataComparer" type="NUnitTestFixtureElement" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASingleLineCommentLanguageRule" type="NUnitTestFixtureElement" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASolutionInspectorWithCommentLanguageRules" type="NUnitTestFixtureElement" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.StatementsAnalyzerTests+GivenAStatementsAnalyzer" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode" type="NUnitTestFixtureElement" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode" type="NUnitTestFixtureElement" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Common.Tests.Xaml.XamlNodeTests+GivenAXamlSnippet" type="NUnitTestFixtureElement" Project="7ECF133B-9576-4385-81DA-20C5732A29B3" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.LocCounterTests" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Common.Tests.RoslynExtensionTests" type="NUnitTestFixtureElement" Project="7ECF133B-9576-4385-81DA-20C5732A29B3" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests" type="NUnitTestFixtureElement" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SnippetMetricsCalculatorTests" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests" type="NUnitTestFixtureElement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.AcceptsEnglishMultiLineComments" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule" MethodName="AcceptsEnglishMultiLineComments" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CanCalculateMetricsForClassSnippet" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="CanCalculateMetricsForClassSnippet" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CanCalculateMetricsForMethodSnippet" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="CanCalculateMetricsForMethodSnippet" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CanCalculateMetricsForNamespaceSnippet" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="CanCalculateMetricsForNamespaceSnippet" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CanCalculateMetricsForSilverlightProject" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="CanCalculateMetricsForSilverlightProject" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CanCalculateMetricsForSilverlightProject" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="CanCalculateMetricsForSilverlightProject" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CanCalculateMetricsForSnippet" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="CanCalculateMetricsForSnippet" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SnippetMetricsCalculatorTests.CanCompile" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SnippetMetricsCalculatorTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SnippetMetricsCalculatorTests" MethodName="CanCompile" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.LocCounterTests.CanCountSyntax" ParentId="ArchiMetrics.Analysis.Tests.LocCounterTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.LocCounterTests" MethodName="CanCountSyntax" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests.CanCreateDirectDepencyChain" ParentId="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests" MethodName="CanCreateDirectDepencyChain" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests.CanCreateMultipleNonDirectDepencyChain" ParentId="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests" MethodName="CanCreateMultipleNonDirectDepencyChain" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests.CanCreateNonDirectDepencyChain" ParentId="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.DependencyAnalyzerTests" MethodName="CanCreateNonDirectDepencyChain" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests.CanFindUnusedCode" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests" MethodName="CanFindUnusedCode" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CanGetHalsteadMetricsForArbitrarySnippet" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" MethodName="CanGetHalsteadMetricsForArbitrarySnippet" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CanGetHalsteadMetricsForClassSnippet" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" MethodName="CanGetHalsteadMetricsForClassSnippet" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CanGetHalsteadMetricsForMethodSnippet" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" MethodName="CanGetHalsteadMetricsForMethodSnippet" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CanGetHalsteadMetricsForMultipleArbitrarySnippets" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" MethodName="CanGetHalsteadMetricsForMultipleArbitrarySnippets" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Common.Tests.Xaml.XamlNodeTests+GivenAXamlSnippet.CanParseXaml" ParentId="ArchiMetrics.Common.Tests.Xaml.XamlNodeTests+GivenAXamlSnippet" type="NUnitTestElement" TypeName="ArchiMetrics.Common.Tests.Xaml.XamlNodeTests+GivenAXamlSnippet" MethodName="CanParseXaml" Project="7ECF133B-9576-4385-81DA-20C5732A29B3" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests.CanResolveRequirementIdsInAttribute" ParentId="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests" MethodName="CanResolveRequirementIdsInAttribute" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests.CanResolveTestForRequirementIds" ParentId="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests" MethodName="CanResolveTestForRequirementIds" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Common.Tests.RoslynExtensionTests.CanSaveSolution" ParentId="ArchiMetrics.Common.Tests.RoslynExtensionTests" type="NUnitTestElement" TypeName="ArchiMetrics.Common.Tests.RoslynExtensionTests" MethodName="CanSaveSolution" Project="7ECF133B-9576-4385-81DA-20C5732A29B3" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests.CanWriteReport" ParentId="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests" MethodName="CanWriteReport" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CodeHasEffort" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests" MethodName="CodeHasEffort" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="CodeHasExpectedLinesOfCode" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="CodeHasExpectedLinesOfCode" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule.FindMispelledMethodNames" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule" MethodName="FindMispelledMethodNames" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.FindNonEnglishMultiLineComments" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule" MethodName="FindNonEnglishMultiLineComments" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASingleLineCommentLanguageRule.FindNonEnglishSingleLineComments" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASingleLineCommentLanguageRule" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASingleLineCommentLanguageRule" MethodName="FindNonEnglishSingleLineComments" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer" MethodName="MethodHasExpectedComplexity" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode" MethodName="NegativeTest" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode" MethodName="SyntaxDetectionTest" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.WhenCalculatingMetricsForNonCodeTextThenDoesNotThrow" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="WhenCalculatingMetricsForNonCodeTextThenDoesNotThrow" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.WhenClassDefinitionHasEmptyConstructorThenHasCyclomaticComplexityOfOne" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="WhenClassDefinitionHasEmptyConstructorThenHasCyclomaticComplexityOfOne" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.WhenClassDefinitionHasEmptyConstructorThenHasCyclomaticComplexityOfOne" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="WhenClassDefinitionHasEmptyConstructorThenHasCyclomaticComplexityOfOne" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.WhenClassDefinitionIsEmptyThenHasCyclomaticComplexityOfOne" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="WhenClassDefinitionIsEmptyThenHasCyclomaticComplexityOfOne" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.WhenClassDefinitionIsEmptyThenHasCyclomaticComplexityOfOne" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator" MethodName="WhenClassDefinitionIsEmptyThenHasCyclomaticComplexityOfOne" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.ProjectDataComparerTests+GivenAProjectDataComparer.WhenComparingHashCodesThenEqualProjectsHaveEqualHashCodes" ParentId="ArchiMetrics.CodeReview.Tests.ProjectDataComparerTests+GivenAProjectDataComparer" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.ProjectDataComparerTests+GivenAProjectDataComparer" MethodName="WhenComparingHashCodesThenEqualProjectsHaveEqualHashCodes" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.ProjectDataComparerTests+GivenAProjectDataComparer.WhenComparingTwoProjectsWithSameFilePathThenProjectAreEqual" ParentId="ArchiMetrics.CodeReview.Tests.ProjectDataComparerTests+GivenAProjectDataComparer" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.ProjectDataComparerTests+GivenAProjectDataComparer" MethodName="WhenComparingTwoProjectsWithSameFilePathThenProjectAreEqual" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests.WhenConvertingComplexXamlSnippetThenGeneratesCode" ParentId="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests" MethodName="WhenConvertingComplexXamlSnippetThenGeneratesCode" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests.WhenConvertingXamlSnippetThenCanCompileCode" ParentId="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests" MethodName="WhenConvertingXamlSnippetThenCanCompileCode" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests.WhenConvertingXamlSnippetThenGeneratesCode" ParentId="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests" MethodName="WhenConvertingXamlSnippetThenGeneratesCode" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASolutionInspectorWithCommentLanguageRules.WhenInspectingCommentsThenDetectsSuspiciousLanguage" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASolutionInspectorWithCommentLanguageRules" type="NUnitTestElement" TypeName="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASolutionInspectorWithCommentLanguageRules" MethodName="WhenInspectingCommentsThenDetectsSuspiciousLanguage" Project="E1C949E2-B71A-4574-8D9F-0678805301E7" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests.WhenLoadingProjectThenCanAccessXaml" ParentId="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Xaml.XamlConverterTests" MethodName="WhenLoadingProjectThenCanAccessXaml" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests.WhenNoRequirementIsSpecifiedThenTestIsIncludedInReport" ParentId="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.RequirementToTestAnalyzerTests" MethodName="WhenNoRequirementIsSpecifiedThenTestIsIncludedInReport" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.StatementsAnalyzerTests+GivenAStatementsAnalyzer.WhenOnlyAssigningConstThenHasZeroLinesOfCode" ParentId="ArchiMetrics.Analysis.Tests.Metrics.StatementsAnalyzerTests+GivenAStatementsAnalyzer" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.StatementsAnalyzerTests+GivenAStatementsAnalyzer" MethodName="WhenOnlyAssigningConstThenHasZeroLinesOfCode" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector.WhenSnippetRootIsClassThenOnlyFindsType" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector" MethodName="WhenSnippetRootIsClassThenOnlyFindsType" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector.WhenSnippetRootIsNamespaceThenOnlyFindsNamespace" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector" MethodName="WhenSnippetRootIsNamespaceThenOnlyFindsNamespace" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector.WhenSnippetRootIsPropertyThenOnlyFindsMember" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector" MethodName="WhenSnippetRootIsPropertyThenOnlyFindsMember" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector.WhenSnippetRootIsStatementThenOnlyFindsStatement" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector" type="NUnitTestElement" TypeName="ArchiMetrics.Analysis.Tests.Metrics.SyntaxCollectorTests+GivenASyntaxCollector" MethodName="WhenSnippetRootIsStatementThenOnlyFindsStatement" Project="36BA2848-F241-4CAA-B037-451251A75951" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.AcceptsEnglishMultiLineComments(&amp;quot;.NET has syntactic sugar the iterator pattern.&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.AcceptsEnglishMultiLineComments" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.AcceptsEnglishMultiLineComments(&amp;quot;This comment is in English.&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.AcceptsEnglishMultiLineComments" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SnippetMetricsCalculatorTests.CanCompile(&amp;quot;var t = Task.FromResult(new object());&amp;quot;)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SnippetMetricsCalculatorTests.CanCompile" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SnippetMetricsCalculatorTests.CanCompile(&amp;quot;var x = 1;&amp;quot;)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SnippetMetricsCalculatorTests.CanCompile" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests.CanFindUnusedCode(&amp;quot;public class MyClass { private int _number = 0; public int Number { get { return _number; } set { _number = value; } } }&amp;quot;,GetAccessorDeclaration,ArchiMetrics.CodeReview.Semantic.UnusedSetPropertyRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests.CanFindUnusedCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests.CanFindUnusedCode(&amp;quot;public class MyClass { public int GetNumber() { return 1; } }&amp;quot;,MethodDeclaration,ArchiMetrics.CodeReview.Semantic.UnusedMethodRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests.CanFindUnusedCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests.CanFindUnusedCode(&amp;quot;public class MyClass { public int Number { get { return 1; } } }&amp;quot;,GetAccessorDeclaration,ArchiMetrics.CodeReview.Semantic.UnusedGetPropertyRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SemanticRulesTests.CanFindUnusedCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CodeHasEffort(&amp;quot;public class Something { \r\npublic int Number { get{ return a - b; } }\r\npublic string GetValue() { return \&amp;quot;x\&amp;quot; + a; } \r\n}&amp;quot;)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CodeHasEffort" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CodeHasEffort(&amp;quot;return \&amp;quot;x\&amp;quot;;&amp;quot;)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CodeHasEffort" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CodeHasEffort(&amp;quot;var a = \&amp;quot;x\&amp;quot;; return a;&amp;quot;)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.SyntaxMetricsCalculatorTests.CodeHasEffort" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic TestClass()\r\n\t\t\t: base(SyntaxWalkerDepth.Node)\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic TestClass()\r\n\t\t\t: base(SyntaxWalkerDepth.Node)\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic TestClass()\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic TestClass()\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod() {\r\n\t\t\t\t\t\tconst string x = \&amp;quot;blah\&amp;quot;;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod() {\r\n\t\t\t\t\t\tconst string x = \&amp;quot;blah\&amp;quot;;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod() {\r\n\t\t\t\t\t\tforeach(var a in x){}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,2)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod() {\r\n\t\t\t\t\t\tforeach(var a in x){}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,2)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod() {\r\n\t\t\t\t\t\tvar x = a + b;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,2)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod() {\r\n\t\t\t\t\t\tvar x = a + b;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,2)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod() {\r\n\t\t\t\t\t\t{}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod() {\r\n\t\t\t\t\t\t{}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod(SyntaxNode node)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbase.VisitBinaryExpression(node);\r\n\t\t\t\t\t\tswitch (node.Kind)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase SyntaxKind.LogicalNotExpression:\r\n\t\t\t\t\t\t\t\t_counter++;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase SyntaxKind.ExclusiveOrExpression:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,4)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tpublic class TestClass {\r\n\t\t\t\t\tpublic void SomeMethod(SyntaxNode node)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbase.VisitBinaryExpression(node);\r\n\t\t\t\t\t\tswitch (node.Kind)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase SyntaxKind.LogicalNotExpression:\r\n\t\t\t\t\t\t\t\t_counter++;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase SyntaxKind.ExclusiveOrExpression:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}&amp;quot;,4)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tusing System;\r\nusing System.Linq;\r\n\t\t\t}&amp;quot;,0)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.ProjectMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode(&amp;quot;namespace Testing\r\n\t\t\t{\r\n\t\t\t\tusing System;\r\nusing System.Linq;\r\n\t\t\t}&amp;quot;,0)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CodeMetricsCalculatorTests+GivenACodeMetricsCalculator.CodeHasExpectedLinesOfCode" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule.FindMispelledMethodNames(&amp;quot;CalclateValue&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule.FindMispelledMethodNames" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule.FindMispelledMethodNames(&amp;quot;GetValu&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule.FindMispelledMethodNames" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule.FindMispelledMethodNames(&amp;quot;SomMethod&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMethodNameSpellingRule.FindMispelledMethodNames" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.FindNonEnglishMultiLineComments(&amp;quot;ASP.NET MVC is a .NET acronym.&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.FindNonEnglishMultiLineComments" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.FindNonEnglishMultiLineComments(&amp;quot;Dette er ikke en engelsk kommentar.&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.FindNonEnglishMultiLineComments" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.FindNonEnglishMultiLineComments(&amp;quot;Donde esta la cerveza?&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenAMultiLineCommentLanguageRule.FindNonEnglishMultiLineComments" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASingleLineCommentLanguageRule.FindNonEnglishSingleLineComments(&amp;quot;Dette er ikke en engelsk kommentar.&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASingleLineCommentLanguageRule.FindNonEnglishSingleLineComments" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;public abstract void DoSomething();&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;public int DoSomething(){\r\n\t\tvar numbers = new[] { 1, 2, 3 };\r\n\t\tvar odds = numbers.Where(n =&amp;gt; n != 1).ToArray();\r\n\t}\r\n}&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;public int DoSomething(){\r\n\tswitch(x){\r\n\t\tcase \&amp;quot;a\&amp;quot;: return 1;\r\n\t\tcase \&amp;quot;b\&amp;quot;: return 2;\r\n\t\tdefault: return 0;\r\n\t}\r\n}&amp;quot;,3)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;public int DoSomething(){\r\n\tvar x = a &amp;gt; 2 ? 1 : 0;\r\n\t}\r\n}&amp;quot;,2)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;public int DoSomething(){\r\n\tvar x = a ?? new object();\r\n\t}\r\n}&amp;quot;,2)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;public void DoSomething(){\r\n\tif(x == 1)\r\n\t{\r\n\t\tvar y = x + 2;\r\n\t}\r\n\telse\r\n\t{\t\t\r\n\t\tvar y = 1 + 2;\r\n\t}\r\n}&amp;quot;,2)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;public void DoSomething(){\r\n\ttry\r\n\t{\r\n\t\tvar x = 1 + 2;\r\n\t\tvar y = x + 2;\r\n\t}\r\n\tcatch(ArgumentNullException ane)\r\n\t{\r\n\t\tthrow new Exception();\r\n\t}\r\n\tcatch(OutOfRangeException ane)\r\n\t{\r\n\t\tthrow new Exception();\r\n\t}\r\n}&amp;quot;,3)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;public void DoSomething(){\r\n\ttry\r\n\t{\r\n\t\tvar x = 1 + 2;\r\n\t\tvar y = x + 2;\r\n\t}\r\n\tcatch\r\n\t{\r\n\t\tthrow new Exception();\r\n\t}\r\n}&amp;quot;,2)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;void DoSomething();&amp;quot;,1)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity(&amp;quot;void DoSomething(){ var x = a &amp;amp;&amp;amp; b; }&amp;quot;,2)" ParentId="ArchiMetrics.Analysis.Tests.Metrics.CyclomaticComplexityAnalyzerTests+GivenACyclomaticComplexityAnalyzer.MethodHasExpectedComplexity" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest(&amp;quot;public abstract void DoSomething();&amp;quot;,ArchiMetrics.CodeReview.Rules.TooHighCyclomaticComplexityRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tdo\r\n\t\t\t\t{\r\n\t\t\t\t\tAnotherMethod();\r\n\t\t\t\t}\r\n\t\t\t\twhile(true);\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.EmptyDoErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tdo\r\n\t\t\t\t{\r\n\t\t\t\t}\r\n\t\t\t\twhile(true);\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.DoLoopSleepErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = 1;\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.TypeObfuscationRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = new object();\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.VarDeclarationForNewVariableErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\twhile(true)\r\n\t\t\t\t{\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.WhileLoopSleepErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest(&amp;quot;public class InnerClass\r\n\t\t{\r\n\t\t\tpublic void BeginSomeMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = GetValue();\r\n\t\t\t}\r\n\r\n\t\t\tpublic void EndSomeMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = GetValue();\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.BeginEndPairRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest(&amp;quot;public class InnerClass\r\n\t\t{\r\n\t\t\tpublic void OpenSomeMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = GetValue();\r\n\t\t\t}\r\n\r\n\t\t\tpublic void CloseSomeMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = GetValue();\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.OpenClosePairRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingNonBrokenCode.NegativeTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;[TestMethod]\r\n[ExpectedException(typeof(Exception))]\r\nprivate void SomeMethod()\r\n        {\r\n\t\t\t// A comment\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.EmptyTestRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;[TestMethod]\r\n[ExpectedException(typeof(Exception))]\r\nprivate void SomeMethod()\r\n        {\r\n\t\t\tAssert.IsTrue(true);\r\n\t\t\tthrow new Exception();\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.MultipleAssertsInTestErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;[TestMethod]\r\n[ExpectedException(typeof(Exception))]\r\nprivate void SomeMethod()\r\n        {\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.EmptyTestRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;[TestMethod]\r\nprivate void SomeMethod()\r\n        {\r\n\t\t\tAssert.IsTrue(true);\r\n\t\t\tAssert.IsFalse(false);\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.MultipleAssertsInTestErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;[TestMethod]\r\nprivate void SomeMethod()\r\n        {\r\n\t\t\tsomeMock.Verify(x =&amp;gt; x(a), Times.Once());\r\n\t\t\tanotherMock.Verify(x =&amp;gt; x(a), Times.Once());\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.MultipleAssertsInTestErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;[TestMethod]\r\nprivate void SomeMethod()\r\n        {\r\n\t\t\tvar value = ServiceLocator.Current.Resolve&amp;lt;IMarkerInterface&amp;gt;();\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.ServiceLocatorInvocationInTestRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void ApplicationInitializationStartup()\r\n        {\r\n            if (applicationInitTask == null)\r\n            {\r\n\t\t\t\tapplicationInitTask = Task.Factory.StartNew(() =&amp;gt; SingleApplicationHostControl.Instance);\r\n\t\t\t\tapplicationInitTask.Wait();\r\n            }\r\n        }&amp;quot;,ArchiMetrics.CodeReview.Rules.ImmediateTaskWaitRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tactivity.ArchiveSettings.NetworkLocation = @\&amp;quot;c:\\\&amp;quot;;\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.DiskLocationDependencyRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tdo\r\n\t\t\t{\r\n\t\t\t\tif (DateTime.UtcNow.Millisecond == 500)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tThread.Sleep(100);\r\n\t\t\t}\r\n\t\t\twhile (true)\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.DoLoopSleepErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tdo\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t\twhile(true)\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.EmptyDoErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tdynamic myVariable = 2;\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.DynamicVariableRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tgoto SomeLabel;\r\n\r\n\t\t\tswitch(x){\r\n\t\t\t\tcase \&amp;quot;a\&amp;quot;: return;\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.GotoStatementErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tpublic IServiceLocator ServiceLocator { get; set; }\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.LeakingServiceLocatorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tvar file = Directory.GetFiles(\&amp;quot;c:\\\&amp;quot;);\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.DirectoryClassDependency)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tvar file = File.Create(\&amp;quot;c:\\blah.txt\&amp;quot;);\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.FileClassDependency)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tvar name = MethodBase.GetCurrentMethod().Name;\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.ReflectionToResolveMethodNameRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tvar time = DateTime.Now;\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.LocalTimeCreationRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tvar unityContainer = ServiceLocator.Current.Resolve&amp;lt;IUnityContainer&amp;gt;();\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.ServiceLocatorResolvesContainerRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\tvar value = ServiceLocator.Current.Resolve&amp;lt;IMarkerInterface&amp;gt;();\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.ServiceLocatorInvocationRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\twhile(true)\r\n\t\t\t{\r\n\t\t\t\tif (DateTime.UtcNow.Millisecond == 500)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tThread.Sleep(100);\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.WhileLoopSleepErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod()\r\n        {\r\n\t\t\twhile(true)\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.EmptyWhileErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod(MyClass x)\r\n        {\r\n\t\t\tobject value = null;\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.TypeObfuscationRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod(MyClass x)\r\n        {\r\n\t\t\tvar value = FirstLevel.SecondLevel.ThirdLevelMethod();\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.LawOfDemeterViolationRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;private void SomeMethod(object x)\r\n        {\r\n\t\t\tvar time = x == someMethod() &amp;amp;&amp;amp; a == b || b == c;\r\n\t\t\tif(x &amp;lt; y){\r\n\t\t\t\tif(x &amp;lt; y/2) {\r\n\t\t\t\t\tswitch(x.Value){\r\n\t\t\t\t\t\tcase \&amp;quot;a\&amp;quot;:\r\n\t\t\t\t\t\tcase \&amp;quot;b\&amp;quot;:\r\n\t\t\t\t\t\tcase \&amp;quot;c\&amp;quot;:\r\n\t\t\t\t\t\tcase \&amp;quot;d\&amp;quot;:\r\n\t\t\t\t\t\tcase \&amp;quot;e\&amp;quot;:\r\n\t\t\t\t\t\t\ty = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.TooHighCyclomaticComplexityRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate object x = new object();\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tGuard.Against(x == null);\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.GuardClauseInMethodWithoutParametersRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate object x = new object();\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tGuard.Against(x == null);\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.GuardClauseInNonPublicMethodRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tactivity.ArchiveSettings.NetworkLocation = @\&amp;quot;c:\\\&amp;quot;;\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.PublicInterfaceImplementationWarningRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tif(x &amp;gt; 1)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.MultipleReturnStatementsErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = GetValue();\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.VarDeclarationForNewVariableErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = a &amp;gt; 1 ? \&amp;quot;a\&amp;quot; : \&amp;quot;b\&amp;quot;;\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.ConditionalExpressionErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tprivate void SomeMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = a ?? b;\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.CoalesceExpressionErrorRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass : ICustomInterface\r\n\t\t{\r\n\t\t\tpublic const string SomeValue = \&amp;quot;Something\&amp;quot;;\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.NoPublicConstantRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass\r\n\t\t{\r\n\t\t\tpublic DomainStorage Storage\r\n\t\t\t{\r\n\t\t\t\tget { return null; }\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.LeakingDomainStorageRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass\r\n\t\t{\r\n\t\t\tpublic ISession Session\r\n\t\t\t{\r\n\t\t\t\tget { return null; }\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.LeakingSessionRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass\r\n\t\t{\r\n\t\t\tpublic UnityContainer Container\r\n\t\t\t{\r\n\t\t\t\tget { return null; }\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.LeakingUnityContainerRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass\r\n\t\t{\r\n\t\t\tpublic void BeginSomeBeginMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = GetValue();\r\n\t\t\t}\r\n\r\n\t\t\tpublic void EndSomeEndMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = GetValue();\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.BeginEndPairRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest(&amp;quot;public class InnerClass\r\n\t\t{\r\n\t\t\tpublic void OpenSomeOpenMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = GetValue();\r\n\t\t\t}\r\n\r\n\t\t\tpublic void CloseSomeCloseMethod()\r\n\t\t\t{\r\n\t\t\t\tvar x = GetValue();\r\n\t\t\t}\r\n\t\t}&amp;quot;,ArchiMetrics.CodeReview.Rules.OpenClosePairRule)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SyntaxInspectorTests+GivenASyntaxInspectorInspectingBrokenCode.SyntaxDetectionTest" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASolutionInspectorWithCommentLanguageRules.WhenInspectingCommentsThenDetectsSuspiciousLanguage(&amp;quot;/* Dette er ikke en engelsk kommentar. */&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASolutionInspectorWithCommentLanguageRules.WhenInspectingCommentsThenDetectsSuspiciousLanguage" type="NUnitRowTestElement" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASolutionInspectorWithCommentLanguageRules.WhenInspectingCommentsThenDetectsSuspiciousLanguage(&amp;quot;//Dette er ikke en engelsk kommentar.&amp;quot;)" ParentId="ArchiMetrics.CodeReview.Tests.Rules.SpellCheckingTests+GivenASolutionInspectorWithCommentLanguageRules.WhenInspectingCommentsThenDetectsSuspiciousLanguage" type="NUnitRowTestElement" /&gt;&lt;/Elements&gt;&lt;/Session&gt;</s:String></wpf:ResourceDictionary>