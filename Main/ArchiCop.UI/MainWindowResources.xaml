<!-- 
This resource dictionary is used by the MainWindow. 
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					mc:Ignorable="d"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:contracts="clr-namespace:ArchiMeter.Common;assembly=ArchiMeter.Common"
                    xmlns:viewModel="clr-namespace:ArchiCop.UI.ViewModel" xmlns:view="clr-namespace:ArchiCop.UI.View">
	<ObjectDataProvider MethodName="GetValues"
						ObjectType="{x:Type sys:Enum}"
						x:Key="EdgeSourceValues">
		<ObjectDataProvider.MethodParameters>
			<x:Type TypeName="contracts:EdgeSource" />
		</ObjectDataProvider.MethodParameters>
	</ObjectDataProvider>

	<DataTemplate DataType="{x:Type viewModel:CircularReferenceViewModel}">
		<view:CircularReferenceView />
	</DataTemplate>

	<DataTemplate DataType="{x:Type viewModel:GraphViewModel}">
		<view:GraphView />
	</DataTemplate>

	<DataTemplate DataType="{x:Type viewModel:EdgesViewModel}">
		<view:EdgesView />
	</DataTemplate>

	<DataTemplate DataType="{x:Type viewModel:CodeReviewViewModel}">
		<view:CodeReviewView />
	</DataTemplate>

	<DataTemplate DataType="{x:Type viewModel:CodeErrorGraphViewModel}">
		<view:CodeErrorGraphView />
	</DataTemplate>

	<DataTemplate DataType="{x:Type viewModel:TestErrorGraphViewModel}">
		<view:TestErrorGraphView />
	</DataTemplate>

	<DataTemplate DataType="{x:Type viewModel:RequirementGraphViewModel}">
		<view:GraphView />
	</DataTemplate>

	<!-- 
  This style configures both of the main content areas in the main window.
  -->
	<Style x:Key="MainHccStyle"
		   TargetType="{x:Type HeaderedContentControl}">
		<Setter Property="HeaderTemplate">
			<Setter.Value>
				<DataTemplate>
					<Border Background="{StaticResource BrushHeaderBackground}"
							BorderBrush="LightGray"
							BorderThickness="1"
							CornerRadius="5"
							Margin="4"
							Padding="4"
							SnapsToDevicePixels="True">
						<TextBlock FontSize="14"
								   FontWeight="Bold"
								   Foreground="White"
								   HorizontalAlignment="Center"
								   Text="{TemplateBinding Content}" />
					</Border>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
				<ControlTemplate TargetType="{x:Type HeaderedContentControl}">
					<DockPanel>
						<ContentPresenter DockPanel.Dock="Top"
										  ContentSource="Header"
										  ContentTemplate="{TemplateBinding HeaderTemplate}" />
						<ContentPresenter ContentSource="Content"
										  ContentTemplate="{TemplateBinding ContentTemplate}" />
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--
  This style ensures that the borders in the main window are consistent.
  -->
	<Style x:Key="MainBorderStyle"
		   TargetType="{x:Type Border}">
		<Setter Property="Background"
				Value="WhiteSmoke" />
		<Setter Property="BorderBrush"
				Value="LightGray" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="CornerRadius"
				Value="5" />
		<Setter Property="SnapsToDevicePixels"
				Value="True" />
	</Style>

	<!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
	<DataTemplate x:Key="CommandsTemplate">
		<Grid d:DataContext="{d:DesignInstance viewModel:MainWindowViewModel}">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="*" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<ItemsControl IsTabStop="False"
						  ItemsSource="{Binding Path=Commands}"
						  Margin="6,2">
				<ItemsControl.ItemTemplate>
					<DataTemplate DataType="viewModel:CommandViewModel">
						<TextBlock Margin="2,6">
                        <Hyperlink Command="{Binding Path=Command}">
                            <TextBlock Text="{Binding Path=DisplayName}" />
                        </Hyperlink>
                    </TextBlock>
					</DataTemplate>
				</ItemsControl.ItemTemplate>
			</ItemsControl>
			<ComboBox Grid.Row="1"
					  x:Name="sources"
					  Margin="8,0"
					  VerticalAlignment="Bottom"
					  ItemsSource="{Binding Source={StaticResource EdgeSourceValues}}"
					  SelectedValue="{Binding Path=Source, Mode=TwoWay}" />
			<CheckBox Grid.Row="2"
					  Margin="8"
					  VerticalAlignment="Bottom"
					  Content="Add Code Review"
					  IsChecked="{Binding Path=IncludeCodeReview, Mode=TwoWay}"
					  IsThreeState="False" />
		</Grid>
	</DataTemplate>

	<!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
	<DataTemplate x:Key="ClosableTabItemTemplate"
				  DataType="viewModel:WorkspaceViewModel">
		<DockPanel Width="120">
			<Button Command="{Binding Path=CloseCommand}"
					Content="X"
					Cursor="Hand"
					DockPanel.Dock="Right"
					Focusable="False"
					FontFamily="Courier"
					FontSize="9"
					FontWeight="Bold"
					Margin="0,1,0,0"
					Padding="0"
					VerticalContentAlignment="Bottom"
					Width="16"
					Height="16" />
			<ContentPresenter Content="{Binding Path=DisplayName}"
							  VerticalAlignment="Center" />
		</DockPanel>
	</DataTemplate>

	<!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
	<DataTemplate x:Key="WorkspacesTemplate">
		<TabControl IsSynchronizedWithCurrentItem="True"
					ItemsSource="{Binding}"
					ItemTemplate="{StaticResource ClosableTabItemTemplate}"
					Margin="4" />
	</DataTemplate>

</ResourceDictionary>